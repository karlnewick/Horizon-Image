##
##    Project: Horizon Windows 10 Build
##    Authors: Karl Newick
##   Filename: playbooks/baseConfig.yml
##
##   Comments: This playbook applies Registry, .Net 3.5, 7Zip, Copy Tools and Apply Windows Updates 
##             
##
##
---
- hosts: default
#- hosts: win
  gather_facts: no
  vars:
    ansible_become_user: W10x64_Ent\administrator
    ansible_become_password: VMware1!
    ansible_become: yes
    ansible_become_method: runas
    ansible_become_flags: logon_type=new_credentials logon_flags=netcredentials_only

  vars_files: 
    - vars/config.yml 
    - vars/software.yml
  tasks:
  #   Comments: Apply common setting to VM in order to complete Build
    - name: "Windows Firewall - Update WinRM Rule to allow Connection on private profile from any IP. Will be disabled once Playbook completes"
      community.windows.win_firewall_rule: 
        name: Windows Remote Management (HTTP-In)
        localport: 5985
        action: allow
        direction: in
        protocol: tcp
        profiles: private,public,domain
        state: present
        enabled: yes
  
    - name: Ensure WinRM Starts when the system has settled an is ready to work reliably
      ansible.windows.win_service:
        name: WinRM
        start_mode: delayed

    - name: Remove AutoAdminLogon
      ansible.windows.win_regedit:
        path: HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon
        name: AutoAdminLogon
        state: absent
        delete_key: yes

    - name: Default User Name to Login with
      ansible.windows.win_regedit:
        path: HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\WinlogonWindows Remote Management (HTTP-In)
        name: DefaultUserName
        data: '{{ ansible_become_user }}'
        
    - name: Default Password
      ansible.windows.win_regedit:
        path: HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon
        name: DefaultPassword
        data: '{{ ansible_become_password }}'
        state: present
        
    - name: Enabled AutoAdminLogon
      ansible.windows.win_regedit:
        path: HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon
        name: AutoAdminLogon
        data: 1
        type: dword

    - name: Set Autologon Count to X
      ansible.windows.win_regedit:
        path: HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon
        name: AutoLogonCount
        data: 2
        type: dword

    - name: Create C:\Tools directory
      ansible.windows.win_file:
        path: C:\Tools
        state: directory

    - name: Create Agents Directory '{{ GoldenImage.WindowsBase.Temp_Dir }}'
      ansible.windows.win_file:
        path: '{{ GoldenImage.WindowsBase.Temp_Dir }}'
        state: directory 

    - name: Create Agents Directory '{{ GoldenImage.WindowsBase.Agents_Dir }}'
      ansible.windows.win_file:
        path: '{{ GoldenImage.WindowsBase.Agents_Dir }}'
        state: directory
            
    - name: Copy Tools folder contents recursively
      ansible.windows.win_copy:
        src: files/tools
        dest: C:\

    - name: Disable Network Discovery via Registy
      ansible.windows.win_regedit:
        path: HKLM:\SYSTEM\CurrentControlSet\Control\Network\NewNetworkWindowOff

    - name: Disable Network Discovery via Firewall
      ansible.windows.win_command: netsh advfirewall firewall set rule group="Network Discovery" new enable=No

    - name: Set an environment variable for machine
      ansible.windows.win_environment:
        level: machine
        variables:
          Temp: '{{ GoldenImage.WindowsBase.Temp_Dir }}'
          Tmp: '{{ GoldenImage.WindowsBase.Temp_Dir }}'

    - name: Define '{{ GoldenImage.WindowsBase.Temp_Dir }}' as an environment variable for Users
      ansible.windows.win_environment:
        level: user
        state: present
        Name: Temp 
        value: '{{ GoldenImage.WindowsBase.Temp_Dir }}' 
##   Comments: Start Customization of Build

    - name: Install 7Zip - If Fails update the URL from 7Zips website
      ansible.windows.win_package:
        path: https://www.7-zip.org/a/7z2201-x64.msi
        state: present
      when:
        - GoldenImage.WindowsBase.SevenZip == true or
          GoldenImage.WindowsBase.AppVolumes.Deploy == true or
          GoldenImage.WindowsBase.DEM.DeployStandard == true or
          GoldenImage.WindowsBase.DEM.DeployEnterprise == true or
          GoldenImage.WindowsBase.AppVolumes.Deploy == true or
          GoldenImage.WindowsBase.Horizon.VMwareOSOptimizationTool.BaseOptimization == true or
          GoldenImage.WindowsBase.Microsoft.FSLogix == true or      
          GoldenImage.WindowsBase.Microsoft.Office == true

    - name: Install .Net 3.5
      ansible.windows.win_optional_feature:
        name: NetFx3
        state: present
        include_parent: yes
      when:
        - GoldenImage.WindowsBase.DotNet35 == true or
          GoldenImage.WindowsBase.Horizon.VMwareOSOptimizationTool.BaseOptimization == true
        
    - name: Install all security updates with automatic reboots
      ansible.windows.win_updates:
        category_names:
        - SecurityUpdates
        - CriticalUpdates
        - UpdateRollups
        reboot: no
        reboot_timeout: 7200
        log_path: C:\tools\ansible_wu.txt
      when:
        - GoldenImage.WindowsBase.Updates == true
    
    # - name: Download PSTools
    #   ansible.windows.win_get_url:
    #     url: https://download.sysinternals.com/files/PSTools.zip
    #     dest: '{{ GoldenImage.WindowsBase.Agents_Dir }}\PSTools.zip'
    #     force: no
    #   when:
    #     - GoldenImage.WindowsBase.Horizon.VMwareOSOptimizationTool.BaseOptimization == true or
    #       GoldenImage.WindowsBase.Horizon.VMwareOSOptimizationTool.CommonAppsRemove == true or
    #       GoldenImage.WindowsBase.Horizon.VMwareOSOptimizationTool.VisualEffect.Quality == true or
    #       GoldenImage.WindowsBase.Horizon.VMwareOSOptimizationTool.VisualEffect.Balance == true or
    #       GoldenImage.WindowsBase.Horizon.VMwareOSOptimizationTool.VisualEffect.Performance == true or
    #       GoldenImage.WindowsBase.Horizon.VMwareOSOptimizationTool.Finalize == true or
    #       GoldenImage.WindowsBase.Microsoft.Office == true
      
    # - name: Extract psexec for PSTools
    #   ansible.windows.win_command: 7z.exe e {{ GoldenImage.WindowsBase.Agents_Dir }}\PSTools.zip -aoa -o{{ GoldenImage.WindowsBase.Agents_Dir }} psexec.exe -r
    #   args:
    #     chdir: 'C:\Program Files\7-Zip'
    #   when:
    #     - GoldenImage.WindowsBase.Horizon.VMwareOSOptimizationTool.BaseOptimization == true or
    #       GoldenImage.WindowsBase.Horizon.VMwareOSOptimizationTool.CommonAppsRemove == true or
    #       GoldenImage.WindowsBase.Horizon.VMwareOSOptimizationTool.VisualEffect.Quality == true or
    #       GoldenImage.WindowsBase.Horizon.VMwareOSOptimizationTool.VisualEffect.Balance == true or
    #       GoldenImage.WindowsBase.Horizon.VMwareOSOptimizationTool.VisualEffect.Performance == true or
    #       GoldenImage.WindowsBase.Horizon.VMwareOSOptimizationTool.Finalize == true or
    #       GoldenImage.WindowsBase.Microsoft.Office == true
          
    - name: Reboot to allow for a Clean Agent Install
      ansible.windows.win_reboot:
        reboot_timeout: 3600

##   Comments: Temp Commands for reminders - ignore

    # - name: Reset AutoLogonCount to 0
    #   ansible.windows.win_regedit:
    #     path: HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon
    #     name: AutoLogonCount
    #     data: 0

    # - name: Reset AutoAdminLogon to 0
    #   ansible.windows.win_regedit:
    #     path: HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon
    #     name: AutoAdminLogon
    #     data: 0